/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import main.Message;
import main.Settings;

/**
 * The class that creates GUI of the Server.
 */
public class ServerFrame extends javax.swing.JFrame implements ActionListener, WindowListener {

    private String startButtonText = "Start Server";
    private String stopButtonText = "Stop Server";

    private Server server = null;

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();
    }

//    /**
//     * starts the Server with the default port
//     */
//    public static void main(String[] arg) {
//
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ServerFrame().setVisible(true);
//            }
//        });
//
//        new ServerFrame(Settings.DefaultPort);
//    }

    /**
     * the constructor for creating the ServerFrame.
     * @param port 
     */
    public ServerFrame(int port) {

        initComponents();

        portNumberField.setText(port + "   ");

        chatTextArea.setFont(Settings.DefaultFont);
        chatTextArea.setEditable(false);

        this.appendRoom("Chat Area.\n");
        textEditArea.setFont(Settings.DefaultFont);
        textEditArea.setEditable(false);

        eventAreaTextPane.setFont(Settings.DefaultFont);
        eventAreaTextPane.setEditable(false);

        this.appendEvent("Events Log.\n", Color.black);

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        portNumberLabel = new javax.swing.JLabel();
        portNumberField = new javax.swing.JTextField();
        stopStartbutton = new javax.swing.JButton();
        chatAreaScrollPane = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        eventAreaScrollPane = new javax.swing.JScrollPane();
        eventAreaTextPane = new javax.swing.JTextPane();
        textEditAreaScrollPane = new javax.swing.JScrollPane();
        textEditArea = new javax.swing.JTextArea();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Real-TIme Group Text Editor - Server");

        portNumberLabel.setText("Server Port");

        stopStartbutton.setText("Start Server");
        stopStartbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopStartbuttonActionPerformed(evt);
            }
        });

        chatAreaScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat Area"));

        chatTextArea.setColumns(20);
        chatTextArea.setRows(5);
        chatAreaScrollPane.setViewportView(chatTextArea);

        eventAreaScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Events Log"));
        eventAreaScrollPane.setViewportView(eventAreaTextPane);

        textEditAreaScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Text Editing Area"));

        textEditArea.setColumns(20);
        textEditArea.setRows(5);
        textEditAreaScrollPane.setViewportView(textEditArea);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(portNumberLabel)
                        .addGap(18, 18, 18)
                        .addComponent(portNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopStartbutton))
                    .addComponent(chatAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(eventAreaScrollPane))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textEditAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portNumberLabel)
                            .addComponent(portNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stopStartbutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chatAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eventAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(textEditAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * appends ordinary messages at the end of the chat area
     *
     * @param str
     */
    public void appendRoom(String str) {
        chatTextArea.append(str);
        chatTextArea.setCaretPosition(chatTextArea.getText().length() - 1);
    }

    /**
     * appends event logs at the end of events area
     *
     * @param str
     */
    public void appendEvent(String str, Color color) {

        StyledDocument doc = eventAreaTextPane.getStyledDocument();

        Style style = eventAreaTextPane.addStyle("A Style", null);
        StyleConstants.setForeground(style, color);

        try {
            doc.insertString(doc.getLength(), str, style);
        } catch (BadLocationException e) {
        }

    }

    /**
     * appends event logs at the end of events area
     *
     * @param str
     */
    public void appendEvent(Message msg) {
        String time = Settings.DateFormat.format(new Date());
        String str = time + " ";
        if (msg.getType() == Message.EDIT) {
            if (msg.getTypedChar() == '\n') {
                str += msg.getSender() + " pressed enter at " + msg.getCaretPos() + "\n";
            } else if (msg.getTypedChar() == '\b') { // backspace
                str += msg.getSender() + " pressed backspace at " + msg.getCaretPos() + "\n";
            } else {
                str += msg.getSender() + " typed " + msg.getTypedChar() + " at " + msg.getCaretPos() + "\n";
            }
        } else {
            str = msg.getMessage();
        }

        appendEvent(str, Color.gray);
    }


    private void stopStartbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopStartbuttonActionPerformed
        // if server is already running then stop it
        if (server != null) {
            server.stop();
            server = null;
            portNumberField.setEditable(true);
            stopStartbutton.setText(startButtonText);
            return;
        }
        // if server is not running then start it
        int port;
        try {
            port = Integer.parseInt(portNumberField.getText().trim());
        } catch (Exception er) {
            appendEvent("Invalid port number", Color.red);
            return;
        }
        // creating a new Server and running it as a thread
        server = new Server(port, this);
        new ServerRunning().start();
        stopStartbutton.setText(stopButtonText);
        portNumberField.setEditable(false);
    }//GEN-LAST:event_stopStartbuttonActionPerformed

    void updateStatus(String message) {
        statusLabel.setText(message);
    }

    /**
     * An inner thread class to run the Server continuously
     */
    private class ServerRunning extends Thread {

        public void run() {
            try {
                server.start(); // executes until server stops or fails
            } catch (BadLocationException ex) {
                Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            stopStartbutton.setText(startButtonText);
            portNumberField.setEditable(true);
            appendEvent("Server Stopped\n", Color.red);
            server = null;
        }
    }

    public void updateEditArea(Message msg) {
        if (msg.getTypedChar() == '\n') {
            textEditArea.insert(msg.getTypedChar() + "", msg.getCaretPos() - 1);
        } else if (msg.getTypedChar() == '\b') { // backspace
            if (0 <= msg.getCaretPos() && msg.getCaretPos() < textEditArea.getText().length()) {
                String startText = textEditArea.getText().substring(0, msg.getCaretPos());
                String endText = textEditArea.getText().substring(msg.getCaretPos() + 1, textEditArea.getText().length());
                textEditArea.setText(startText + endText);

            }
        } else {
            textEditArea.insert(msg.getTypedChar() + "", msg.getCaretPos());
        }
    }

    public JTextArea getTextEditArea() {
        return textEditArea;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane chatAreaScrollPane;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JScrollPane eventAreaScrollPane;
    private javax.swing.JTextPane eventAreaTextPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField portNumberField;
    private javax.swing.JLabel portNumberLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopStartbutton;
    private javax.swing.JTextArea textEditArea;
    private javax.swing.JScrollPane textEditAreaScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowOpened(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosed(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
